# Default values for redis-pod-labeler.

# Default replica count set to 1
replicaCount: 1

# Default revision history limit set to 5
revisionHistoryLimit: 5

# Namespace you wish to deploy
namespace: redis

# How frequent you want to label the redis pods in seconds
# ( Default values to set to 60 seconds )
labelUpdateFrequency: 60

# key=value of to match and get the redis pods (here release=redis-main)
redisPodSelector:
  keyValuePair: "release=my-redis"

# redis header service name
headlessName: "my-redis-redis-ha"

# expose redis master via service
exposeMasterService:
  enabled: true

# redis port
redisPort: 6379

#sentinelPort
sentinelPort: 26379

# skip the tls verification( default to false )
skipTlsVerify:
  enabled: false

# Redis cluster name
redisClusterName: "mymaster"

# Company domain( to make label like "abc.com/role"
companyDomain: "redis.io"

# if u want to see more detailed output whats happening.( in case you want debug :D )
# Default set to false
verbose:
  enabled: false

# chart images details
image:
  repository: "hmdmph/redis-pod-labeler"
  tag: "1.0.0-alpine"
  pullPolicy: IfNotPresent

# Override the deployment names
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

resources: {}
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

imagePullSecrets: []

nodeSelector: {}

tolerations: []

affinity: {}
